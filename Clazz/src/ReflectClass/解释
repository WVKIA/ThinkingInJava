反射：运行期间，运行java获取类的信息，并且能够操作类或对象的内部属性
    反射的核心是JVM在运行时才加载类或者调用方法，而不用在编译期事先知道对象的类信息
    重点在于 运行期 而不是 编译期

理解反射首先需要理解不用反射的时候，是怎么创建对象的：
    什么是JVM，java虚拟机，就是一个进程，用来运行java代码的地方

    正常的代码：Object o = new Object();
    运行 -- 》 首先JVM启动，代码所在的 .java文件被会编译成一个 .class文件，然后通过类加载器，加载到JVM的内存中，涉及到类加载机制，JVM通过类加载器生成一个唯一的 class 对象，用来表示类的信息，里面存有
    这个类的所有元信息，例如构造器、接口、父类等等 。然后
             --》 执行代码，
              --》执行结束，JVM关闭
     正常的运行方式 都需要首先知道这个类，有一个class文件，编译期可知，然后jvm加载，但如果在运行时需要使用一个还没加载到JVM中的类，比如从网络、文件中获取一串字节，然后被告知这是一个类，这样就需要在运行时
     获取到类的信息。这个时候就需要反射。
        通常在设计通用框架时需要用到，比如需要用到数据库驱动，但在不同的环境使用不同的驱动，mysql或oracle，为了避免写if else代码，就可以从配置文件中配置驱动信息，然后根据实际情况使用反射具体获取不同的类


反射需 Class、Constructor、Method、Field 四个类的支持

//*********

对于Constructor、Method、Field中 getXX() 都是只能获取公有的，即public，Method、Field中可以获取到从父类继承的，但Constructor构造器属于类独有，不可能获取到父类的
                                                                getDeclaredXX可以获取所有的，但只限于本类